____________________________________________________________________________
1.
#include <stdio.h>
#include <stdlib.h>

int binary_search(int arr[], int N, int H){
    int l=0;
    int r=N-1;

    while(l<=r){
        int mid = l+ ((r-l)/2);
        if(arr[mid]==H){
            return mid;
        }
        else if(arr[mid]<H){
            l=mid+1;
        }
        else{
            r=mid-1;
        }
    }
    return -1;
}

int main(){
    int N, H;
    scanf("%d %d", &N, &H);

    int* arr= malloc(sizeof(int)* N);

    for(int i=0; i<N; i++){
        scanf("%d", &arr[i]);
    }

    printf("%d", binary_search(arr, N, H)+1);

    return 0;
}
____________________________________________________________________________
2.
#include<stdio.h>
#include<stdlib.h>

int highestIndex(int arr[], int N){
    int l = 0;
    int r = N-1;

    int max=-1;
    while(l<=r){
        int mid = (l+r)/2;
        if((mid == 0 || arr[mid] > arr[mid-1]) && (mid == N-1 || arr[mid] > arr[mid+1])){
            max = mid;
            break;
        }
        else if(mid > 0 && arr[mid] < arr[mid-1]){
            r = mid - 1;
        }
        else {
            l = mid + 1;
        }
    }
    return max;
}

int main(){
    int N;
    scanf("%d", &N);

    int *arr= malloc(sizeof(int)*N);
    for(int i=0; i<N; i++){
        scanf("%d", &arr[i]);
    }

    printf("%d\n", highestIndex(arr, N)+1);

}
____________________________________________________________________________
3.
#include<stdio.h>
#include<stdlib.h>

int index7(int arr[], int N){
    int l=0;
    int r=N-1;
    int mid=-1;
    while(l<=r){
        mid = l+((r-l)/2);

        if(arr[mid]==1){
            break;
        }
        else if(arr[mid]<arr[0]){
            r = mid-1;
        }
        else if(arr[mid]>arr[0]){
            l = l+1;
        }
    }

    if(arr[N-1]<7){
        l=0;
        r=mid-1;
    }
    else{
        l=mid+1;
        r=N-1;
    }

    while(l<=r){
        mid = l+((r-l)/2);

        if(arr[mid]==7){
            return mid;
            break;
        }
        else if(arr[mid]<7){
            l = mid+1;
        }
        else if(arr[mid]>7){
            r = mid-1;
        }
    }

    return -1;
}

int main(){
    int N;
    scanf("%d", &N);
    N--;
    int *arr= malloc(sizeof(int)*N);
    for(int i=0; i<N; i++){
        scanf("%d", &arr[i]);
    }


    printf("%d\n", index7(arr, N));

    return 0;
}
____________________________________________________________________________
4.
#include <stdio.h>

double sqrt_n(int n)
{
    int low = 0, high = n , mid;
    double ans;
    while (low <= high)
    {
        mid = (low + high) / 2;
        if (mid * mid == n)
        {
            ans = mid;
            break;
        }
        if (mid * mid < n)
        {
            ans=low;
            low = mid + 1;
        }
        else
        {
            high = mid - 1;
        }
    }
    float increment_value = 0.1;
    for (int i = 0; i < 6; i++)
    {
        while (ans * ans <= n)
        {
            ans += increment_value;
        }
        ans -= increment_value;
        increment_value /= 10;
    }
    return ans;
}

int main()
{
    int n;
    printf("Enter number: ");
    scanf("%d",&n);
    printf("Square root of number %d is: %lf ",n, sqrt_n(n));
    return 0;
}

____________________________________________________________________________
5.
#include <stdio.h>
#include <stdlib.h>

int binarySearch(int arr[], int low, int high, int target) {
    while (low <= high) {
        int mid = low + (high - low) / 2;

        if (arr[mid] == target) {
            return 1; // Found the target
        } else if (arr[mid] < target) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return 0; // Target not found
}

int BinarySearchRow(int **matrix, int N, int K){
    for (int i = 0; i < N; i++) {
        if (binarySearch(matrix[i], 0, N - 1, K)) {
            return 1; // Target found in this row
        }
    }
    return 0;
}

int main(){
    int N, K;
    scanf("%d", &N);
    scanf("%d", &K);

    int** matrix = (int**)malloc(N * sizeof(int*));
    for (int i = 0; i < N; i++) {
        matrix[i] = (int*)malloc(N * sizeof(int));
    }
    for(int i=0; i<N; i++){
        for(int j=0; j<N; j++){
            scanf("%d", &matrix[i][j]);
        }
    }
    int result= BinarySearchRow(matrix, N, K);
    if(result==0)
        printf("NO\n");
    else if(result==1)
        printf("YES\n");
    else
        return 0;
}
____________________________________________________________________________
6.
#include<stdio.h>
#include<stdlib.h>
int revenue(int arr[], int a, int b){
 int sum=0;
 for(int i=a; i<=b; i++){
    sum+=arr[i];
 }
 return sum;
}
int main(){
        int N, Q;
        scanf("%d %d", &N, &Q);
        int *arr= malloc(sizeof(int)*N);
        int *result= malloc(sizeof(int)*Q);
        for(int i=0; i<N; i++){
            scanf("%d", &arr[i]);
        }
        for(int i=0; i<Q; i++){
            int a, b;
            scanf("%d %d", &a, &b);
            result[i]=revenue(arr, --a, --b);
        }
        printf("\n");
        for(int i=0; i<Q; i++){
            printf("%d\n", result[i]);
        }
}
____________________________________________________________________________
7.
#include<stdio.h>
#include<stdlib.h>
int max(int A, int B){
    if(A>B)
        return A;
    else
        return B;
}
int highestRevenue(int arr[], int N){
    int maximum=0;
    for(int i=0; i<N; i++){
        for(int j=i; j<N; j++){
            int sum=0;
            for(int k=i; k<=j; k++){
                sum+=arr[k];
            }
            maximum= max(maximum, sum);
        }
    }
    return maximum;
}
int main(){
    int N;
    scanf("%d", &N);
    int *arr=malloc(sizeof(int)*N);
    for(int i=0; i<N; i++){
        scanf("%d", &arr[i]);
    }
    printf("%d\n", highestRevenue(arr, N));
}
____________________________________________________________________________
8.
#include<stdio.h>
#include<stdlib.h>
int max(int A, int B){
    if(A>B)
        return A;
    else
        return B;
}
int maxProfit(int arr[], int N){
    int maximum=0;
    for(int i=0; i<N; i++){
        for(int j=i; j<N; j++){
            int revenue=0;
            revenue= arr[j]-arr[i];
            maximum= max(maximum, revenue);
        }
    }
    return maximum;
}
int main(){
    int N;
    scanf("%d", &N);
    int *arr=malloc(sizeof(int)*N);
    for(int i=0; i<N; i++){
        scanf("%d", &arr[i]);
    }
    printf("%d\n", maxProfit(arr, N));
}
____________________________________________________________________________
9.
#include<stdio.h>
#include<stdlib.h>

int maxProfit(int arr[], int N) {
    int maxProfit = 0;

    for (int i = 1; i < N; i++) {
        if (arr[i] > arr[i - 1]) {
            maxProfit += arr[i] - arr[i - 1];
        }
    }

    return maxProfit;
}

int main() {
    int N;
    scanf("%d", &N);

    int *arr = malloc(sizeof(int) * N);

    for(int i = 0; i < N; i++) {
        scanf("%d", &arr[i]);
    }

    int result = maxProfit(arr, N);
    printf("%d\n", result);

    free(arr); // Don't forget to free the allocated memory
    return 0;
}
____________________________________________________________________________
10.
#include<stdio.h>
void spiral(int N){
    int top=0;
    int bottom=N-1;
    int left=0;
    int right=N-1;

    //malloc the nxn array
    int arr[1000][1000];

    int index=1;

    while(top<=bottom&&left<=right){
        for(int i=left; i<=right; i++){
            arr[top][i]=index++;
        }
        top++;

        for(int i=top; i<=bottom; i++){
            arr[i][right]=index++;
        }
        right--;

        if (top <= bottom) {
        for(int i=right; i>=left; i--){
            arr[bottom][i]=index++;
        }
        bottom--;
        }
        if (left <= right) {
        for(int i=bottom; i>=top; i--){
            arr[i][left]=index++;
        }
        left++;
        }


    }
    //print
        for (int i = 0; i < N; i++) {
            for (int j = 0; j < N; j++) {
                printf("%d ", arr[i][j]);
            }
        printf("\n");
        }

}
int main(){
    int N;
    scanf("%d", &N);
    spiral(N);
}
____________________________________________________________________________
